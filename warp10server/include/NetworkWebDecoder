#ifndef NETWORKWEBDECODER_
#define NETWORKWEBDECODER_

#include <NetworkDecoder>
#include <ByteArray>

namespace u
{
	/**
	 * The http protocoll decoder.
	 * <p>
	 * This decoder is a simple version only to receive file download
	 * requests for small files.
	 * </p>
	 */
	class NetworkWebDecoder : public NetworkDecoder
	{
		protected:
			uint64 _lastLength;
			ByteArray _receivedData;
		public:
			/**
			 * Standard constructor.
			 */
			NetworkWebDecoder();

			/**
			 * Standard destructor.
			 */
			~NetworkWebDecoder();

			/**
			 * Destroy the decoder.
			 */
			void destroy();

			/**
			 * Classname of the object.
			 */
			String className();

			/**
			 * Encode response data.
			 * @param buffer Data to send.
			 */
			void encodeResponse(ByteArray *buffer);

			/**
			* Start close procedure.
			*/
			void sendClose();

			/**
			 * Send DATA event when connection is ready.
			 * <p>Thread callable.</p>
			 * @param arg Unused.
			 */
			void checkReceivedData(Object *arg);

		protected:
			/**
			 * Decode incomming data.
			 * <p>This function decode the data inside the buffer and call the
			 * functions for data package.
			 * It can be, that on call get more than one frame or is between the frames.
			 * So the implementation function leaf the rest frame inside the buffer.
			 * Important is, that all complete frame has to be read, because the
			 * next call of decodeData is first after receiving more data happend.<br>
			 * Also has the implementation class send the events for the network
			 * event protocol.<br>
			 * This function need to be called, when the decoder is locked.</p>
			 * @param data Received raw data.
			 */
			void decodeData(ByteArray *buffer);
	};
}

#endif // !NETWORKWEBDECODER_