/*
 * NetworkControlConnection
 *
 *  Created on: 06.08.2011
 *      Author: Endre Bock
 */

#ifndef NETWORKCONTROLCONNECTION_
#define NETWORKCONTROLCONNECTION_

#include <NetworkConnection>

namespace u
{
	/**
	 * A etablished connection to the control server.
	 * <p>This object is used for the connection to the control server. It's
	 * represent a endpoint of the connection. The server and the client have
	 * is own connection object.
	 * </p>
	 */
	class NetworkControlConnection : public NetworkConnection
	{
		protected:
			bool _inAsk;

			/**
			 * The stack for remember remote initialized transfers.
			 * <p>Is used in ready progress to detect, of the ready/data/... event for
			 * me(receiver) or for the system.</p>
			 */
			Vector<uint64> transferStack;
		public:
			/**
			 * Constructor.
			 */
			NetworkControlConnection(Socket* socket, NetworkDecoder *plugin);

			/**
			 * Destructor.
			 */
			~NetworkControlConnection();

			/**
			 * Default destroyer.
			 */
			void destroy();

			/**
			 * This class name.
			 */
			String className();

			/**
			 * Close begin procedure was received.
			 * <p>This function send the <code>CLOSE_REQUIRED</code> event to the
			 * room. Also set the function the connection into the "inclode"
			 * status.</p>
			 */
			virtual void doCloseRequired();

			/**
			 * End of transfer received[11].
			 * <p>The connection receive the EOT package. After all datablocks
			 * was copied to the project close the connection this transfer.<br>
			 * A <code>EOT</code> will be sent to inform the project about this.
			 * </p>
			 * @param id Transfer-id.
			 */
			virtual void doEOT(uint64 id);

			/**
			 * A datablock was received[7].
			 * <p>The connection received a datablock from the other side. Via a
			 * <code>NetTransferEvent::DATA</code> informs this function the
			 * project about it.<br>
			 * The <code>id</code> attribute contains the transfer code.
			 * </p>
			 * @param id Transfer-id.
			 * @param data Received data.
			 */
			virtual void doReceivedData(uint64 id, ByteArray* data);

			/**
			 * Transfer ready package was received[4].
			 * <p>The other side is ready to receive the data. This function
			 * send a <code>READY</code> event to the project, that now the
			 * transfer can be start. The project has to answer with a
			 * <code>NetTransferEvent::DATA</code> event.
			 * </p>
			 * @param id Transfer-id.
			 */
			virtual void doTransfer(uint64 id);

			/**
			 * Transfer begin event received[2].
			 * <p>The connection received a data init package and informs
			 * with the <code>INIT</code> event the project about it. The project
			 * can now prepare(eg. module loading/creating) the receiving of the
			 * data and answers with a <code>READY</code> event. The <code>id</code>
			 * data contains the transfer code. This code has on all follow
			 * event to be set in the <code>id</code> attribute.
			 * </p>
			 * @param id Transfer-id.
			 */
			virtual void doTransferInit(uint64 id);

			/**
			 * Send event for a etablished connection.
			 */
			virtual void doReady();

		protected:
			/**
			 * Event API: Begin of the connection close procedure.
			 * <p>With this event change the connection to the "inclose"
			 * status. This means, that new transfer requests will ignored.<br>
			 * Also send this function the close package to inform the other side.</p>
			 * @param event Event object.
			 */
			virtual void onClose(Object* event);

			/**
			 * Event API: Close is confirmed.
			 * <p>With the event <code>CLOSE_CONFIRMED</code> eventize the project
			 * or program that the connection can closed now. After sending of
			 * the confirmation package close and destroy this function the
			 * connection object. A <code>CLOSED</code> event informs all room
			 * member, that the room will not more exists after receiving this event.
			 * A remove event listener is not necessary and can produce out of
			 * memory errors.</p>
			 * @param event Event object.
			 */
			virtual void onCloseConfirmed(Object* event);

			/**
			 * Event API: Data transfer initialized[1].
			 * <p>Via the <code>INIT</code> event tell the program/project the
			 * connection, that data(block) for sending exists.<br>
			 * This function send a data init package and a transfer code
			 * to the other side.
			 * </p>
			 * @param event The INIT event object.
			 */
			virtual void onTransferInit(Object *event);

			/**
			 * Event API: Ready for receiving of data[3].
			 * <p>This function informs the other side with a ready package, that
			 * this side is ready to receive the data.
			 * </p>
			 */
			virtual void onTransferReady(Object *event);

			/**
			 * Event API: Ready for sending of data[5].
			 * <p>Via the <code>NetTransferEvent::DATA</code> event starts the
			 * project the data transfer. Via <code>DataTransferEvent::GET</code> ask
			 * the connection active for the complete existing data(block). That event
			 * will sent by this function.
			 * </p>
			 * @param event The DATA event object.
			 */
			virtual void onSendDataRequest(Object *event);

			/**
			 * Event API: Data transport[6].
			 * <p>The project sent the data via this event. The decoder plugin
			 * encode the data for the target network and send the data on the
			 * socket.<br>
			 * The <code>data</code> attribute contains the pointer to the data
			 * and the <code>id</code> contains the transfer code.<br>
			 * After complete sending of the data send this function a <code>
			 * COMPLETE</code> event. The project can with receiving of that
			 * event clean the databugger and can start the next data
			 * block with <code>NetTransferEvent::DATA</code> or finishing the
			 * transfer with <code>NetTransferEvent::EOT</code>.
			 * </p>
			 * @param event The DATA event with the data.
			 */
			virtual void onSendData(Object *event);

			/**
			 * Event API: Get the received data[8].
			 * <p>The project informs the connection with this <code>GET</code> event
			 * that the datablock can now copied. This do this function with the
			 * <code>DataTransferEvent::DATA</code> event. The project has the
			 * receiving and saving activity to confirm with <code>COMPLETE</code>.
			 * </p>
			 */
			virtual void onGetDataRequest(Object *event);

			/**
			 * Event API: Complete saved[9].
			 * <p>This function remove the datablock, which was sent to the project
			 * and cleanup the memory. If more received datablock or eot packages
			 * exists, then call this the function the <code>doReceiveData()</code>
			 * or <code>doEOT()</code> function.<br>
			 * The <code>id</code> attribute contains the transfer code.
			 * </p>
			 * @param event The COMPLET event object with the transfer code.
			 */
			virtual void onDataComplete(Object event);

			/**
			 * Event API: End of transaction[10].
			 * <p>Over the <code>EOT</code> event tells the project the connection
			 * that the end of the data transfer reached. The connection sent a
			 * eot package to the other side and close the transfer after it. The
			 * transfer id from the <code>id</code> attribute will not more used,
			 * unless the maximum number if id's was reached.
			 * </p>
			 * @param event The EOT event object.
			 */
			virtual void onEOT(Object *event);

			/**
			 * Ask for ready connection.
			 * <p>Via that event can ask the application, if the handshake complete.
			 * This hasn't a "not ready" answer. This procedure wait, up to the
			 * connection ready is.<br/>
			 * The decoder will send this to, so we doesn't need to wait. Only is
			 * ready, this function onswer the ready question. Otherwise do it
			 * nothing.
			 * @param event The event object.
			 */
			virtual void onReadyCheck(Object *event);

	};
}  // namespace u

#endif /* NETWORKCONTROLCONNECTION_ */
