/*
* NetworkDecoder
*
*  Created on: 06.08.2011
*      Author: Endre Bock
*/

#ifndef NETWORKDECODER_
#define NETWORKDECODER_

#include <Object>
#include <ByteArray>
#include <Timeout>
#include <Datablock>

namespace u
{
	/**
	 * Forward declaration.
	 */
	class NetworkConnection;

	/**
	* The decoder interface.
	* <p>The decoder is the translator between the standard
	* datablock packes and the byte code on the network line.
	* He conatins a small protocol to validate the decoder
	* on the other side and communication via a function API
	* with the NetworkConnection object(only).
	* </p>
	*/
	class NetworkDecoder : public Object
	{
		protected:
			/**
			* The version number is necessary for the decoder
			* handshake.
			* <p>This value has follow structure:
			* <ul>
			* <li> Byte 0: Main version number (0-255)
			* <li> Byte 1: Minor version number (0-255)
			* </ul>
			* The Version 1.00 is the value 0x0100.
			* </p>
			*/
			static uint16 _version;

			/**
			* The network connection object.
			*/
			NetworkConnection * _con;

			/**
			 * Stop reading flag.
			 */
			bool _stopReading;

			/**
			 * Flag, that an reading function is running.
			 */
			bool _isReading;

			/**
			 * List of timeouts.
			 */
			Datablock _timeoutList;

			/**
			 * Words for timeoutlist
			 */
			static String wordHandshake;
			static String wordClose;
			static String wordCloseConfirmed;

		public:
			/**
			 * Network de- and encoder object.
			 */
			NetworkDecoder();

			/**
			 * Destructor.
			 */
			~NetworkDecoder();

			/**
			 * Save connection.
			 * @param con Networkconnection for this de/encoder.
			 */
			virtual void connection(NetworkConnection *con);

			/**
			 * Destroy the decoder.
			 */
			void destroy();

			/**
			 * Classname of the object.
			 */
			String className();

		protected:
			/**
			 * Data receiving.
			 * <p>This function observ the socket and send via signal new data into
			 * the room.<br/>
			 * This function is an single class linear function. A second call
			 * of this function has no effect.</p>
			 * @param arg Parameter from the thread call (unused).
			 */
			virtual void doReadData(Object *arg);

			/**
			 * Decode incomming data.
			 * <p>This function decode the data inside the buffer and call the
			 * functions for data package.
			 * It can be, that on call get more than one frame or is between the frames.
			 * So the implementation function leaf the rest frame inside the buffer.
			 * Important is, that all complete frame has to be read, because the
			 * next call of decodeData is first after receiving more data happend.<br>
			 * Also has the implementation class send the signals for the network
			 * signal protocol.<br>
			 * This function need to be called, when the decoder is locked.</p>
			 * @param data Received raw data.
			 */
			virtual void decodeData(ByteArray *buffer) = 0;

			/**
			 * Send data nativ to the socket.
			 * @param data Data array to send.
			 */
			virtual void send(ByteArray* data);

			/**
			 * Threaded part of closing connection.
			 * <p>Note: Don't run without a thread, otherwise you risk a deadlock.
			 * </p>
			 * @param arg Thread arguments(unused).
			 */
			virtual void doClosed(Object* arg);

			/**
			 * Remove a timeout from the list.
			 */
			virtual void removeTimeout(Object* arg);
	};
}

#endif /* NETWORKDECODER_ */
