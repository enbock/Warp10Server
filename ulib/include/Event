/*
* Event
*
*  Created on: 10.04.2011
*      Author: Endre Bock
*/

#ifndef SIGNAL_
#define SIGNAL_

#include <Object>

namespace u
{

	// forward declaration
	class EventDispatcher;

	/**
	* Base event.
	* <p>A event is a running/transporting message between object. This
	* class is the base class of all event.<br>
	* A event can have attributes. This attribute will be copyied while running
	* of the event.
	* </p>
	*/
	class Event : public Object
	{
		protected: // attributes
			friend class EventDispatcher;

			/**
			* Name of the event.
			*/
			const String* _type;
			/**
			* Target of the object.
			* <p>This will be set on the running moment.</p>
			*/
			EventDispatcher* _target;

		public: // attributes and functions
			/**
			* Definition for a complete event.
			*/
			static const String COMPLETE;

			/**
			* Definiton for a progress event.
			*/
			static const String PROGRESS;

			/**
			* Constructor.
			*/
			Event(String const& type);

			/**
			* Destructor.
			*/
			~Event();

			/**
			* Target of this event.
			* @return Pointer to the target,
			*/
			EventDispatcher* target();

			/**
			* Name of the event.
			* @return A const reference of the name.
			*/
			const String* type();

			/**
			* Clone the event.
			* @return A with new created copy of this event.
			*/
			virtual Event* clone();

			/**
			* Information about the event.
			* @return Info string.
			*/
			virtual String toString();

			/**
			* Destroy this object.
			*/
			virtual void destroy();

			/**
			* The class name.
			* @return String with the class name.
			*/
			virtual String className();
	};
}
#endif /* SIGNAL_ */
