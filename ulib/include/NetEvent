/*
 * NetEvent
 *
 *  Created on: 15.07.2011
 *      Author: Endre Bock
 */

#ifndef NETSIGNAL_
#define NETSIGNAL_

#include <Event>
#include <EventRoom>
#include <NetworkConnection>

namespace u
{
	/**
	 * Basic network protocol events.
	 * <p>This class contains the events for the network protocols. The request
	 * events will implemented via special project subclasses.</p>
	 */
	class NetEvent : public Event
	{
		protected:
			/**
			 * Event room pointer.
			 */
			EventRoom* _room;
			/**
			 * Network address or socket file or other socket host description.
			 */
			String _addr;
			/**
			 * Network port.
			 */
			int64 _port;
			/**
			 * Transportet connection object.
			 */
			NetworkConnection* _con;

		public:
			/**
			 * Event of a new etablished connection.
			 * <p>If a new network connection was etablished then is sent this event.
			 * This can be while a connection request or via a listeners on the
			 * server side.<br>
			 * The <code>address</code> and <code>port</code> contains the data about
			 * the other side. The <code>room</code> contains a pointer to the event
			 * room in them the tranfer protocol will applied.<br>
			 * <b>Note:</b> It is a good practise to add the listeners to the room,
			 * but not to save the room self.</p>
			 */
			static const String NEW_CONNECTION;

			/**
			 * Creating of network (new) connection failed.
			 */
			static const String CONNECTION_FAILED;

			/**
			 * A new listener was created.
			 * <p>Any time, a new listener was created(after send of GET_*_LISTENER)
			 * send this event the information about the new listener.<br>
			 * The attribute <b>room</b> contains the pointer to the room, in them
			 * the connection protocol will applied.<br>
			 * <b>Note:</b> It is a good practise to add the listeners to the room,
			 * but not to save the room self.</p>
			 */
			static const String LISTENER;

			/**
			 * Creating of a listener failed.
			 */
			static const String LISTENER_FAILED;

			/**
			 * Close and destroy a listner or initialize the close of a connection.
			 * <p>This event has multiple interpretations in depent on which room
			 * this event will send.<br>
			 * If the event will send on a listener room, so close/interrupt the
			 * listener all active connections, destroy them and destroy them self.<br>
			 * A sending on a connection room initiate the closing protocol for the
			 * current connection.<br>
			 * When this event was sent on a connection room, so send the local
			 * side a close request package via the network. By a successs accepting
			 * will send the <code>CLOSED</code> event to the room.<br>
			 * This event doesn't transport data.
			 * </p>
			 */
			static const String CLOSE;

			/**
			 * Question for an ready connection.
			 * <p>The connection wait so long with the answer, up to the moment,
			 * that the connection is real finish (inclusive hand shakes etc.)
			 * </p>
			 */
			static const String IS_CONNECTION_READY;

			/**
			 * Answer or status message, that the connection ready is.
			 * <p>The <code>connection</code> contains the connection object, which
			 * ready is.</p>
			 */
			static const String CONNECTION_IS_READY;

			/**
			 * Pointer of closed and destroyed connection or listener.
			 * <p>This attribute will set only on the CLOSED event and contains
			 * the pointer of the destroyed network connection or network listener.<br>
			 * Only over this attribute is it save possible, that the service or
			 * the listener can removed the destroyed object from whose lists.
			 * </p>
			 */
			void* closee;

			/**
			 * Connection was closed event.
			 * <p>This event is the answer of a close request. The close request
			 * was send to the outer side and the other side send a accept event
			 * back(unaccaptable is not possible).<br>
			 * The closee attribute is filled for that event type.
			 * </p>
			 */
			static const String CLOSED;

			/**
			 * Close requeired event.
			 * <p>This event will send to the connection room, if a close package
			 * was received. The controller object(the program code) has now time
			 * to make cleanup work and has to answer with <code>CLOSE_CONFIRMED</code>.
			 * </p>
			 */
			static const String CLOSE_REQUIRED;

			/**
			 * Close was acceppted and is confirmed.
			 * <p>This is the last event from the program as answer for
			 * <code>CLOSE_REQUIRED</code>. After sending of the answer package will
			 * the connection beeing closed and destroyed. The <code>CLOSED</code>
			 * event will send after the close answer package was sent successfully.
			 * </p>
			 */
			static const String CLOSE_CONFIRMED;

			/**
			 * Constructor of a NetEvent Object.
			 * <p>A network event can used in many different situations. On a new
			 * connection or new listening of incomming connections.
			 * The room attribute trabsports the new event room in that the protocol
			 * works.<br>
			 * The address and port is eg. necessary on requests for new connections.
			 * <br>If the attributes unused, so let them null or empty. When
			 * one of this attributes is necessary is defined by the protocols.
			 * </p>
			 * @see http://drive.ww/Architektur/EARoot/EA1/EA5.html EA/impl./_Protocols
			 * @param type Event type.
			 * @param adress Destination address(hostname, socket file, etc).
			 * @param port Connection port, if necessary.
			 * @param room Event room of protocol.
			 */
			NetEvent(String const& type, String address = "", int64 port = 0,
				EventRoom* room = null);

			/**
			 * Constructor of a NetSigal object.
			 * <p>The event NEW_CONNECTION can is also used to transport the
			 * new connection object to the requester object by the NetworkManager.
			 * <br>In this case the event saves just the connection object and
			 * fill the address and port from that connection object.</p>
			 * @param type Event type.
			 * @param con  The network connection object.
			 */
			NetEvent(String const& type, NetworkConnection* con);

			/**
			 * Destructor.
			 */
			~NetEvent();

			/**
			 * Class name.
			 * @return The class name as String.
			 */
			String className();

			/**
			 * Destroy this network event object.
			 */
			void destroy();

			/**
			 * Clone the new event.
			 * @return A with "new" created copy of this server event.
			 */
			Event* clone();

			/**
			 * Event room.
			 */
			EventRoom* room();

			/**
			 * Network address.
			 */
			String address();

			/**
			 * Network port.
			 */
			int64 port();

			/**
			 * Connection object.
			 */
			NetworkConnection* connection();

		protected:
			/**
			 * Initialize the class members.
			 */
			void init();
	};
}

#endif /* NETSIGNAL_ */
