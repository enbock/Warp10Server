/*
* NetworkListener
*
*  Created on: 17.07.2011
*      Author: Endre Bock
*/

#ifndef NETWORKLISTENER_
#define NETWORKLISTENER_

#include <RoomOwner>
#include <Socket>
#include <NetworkConnection>

#ifndef FPS
#define FPS 90
#endif

namespace u
{
	/**
	* Network listener base class.
	* <p>The network listener is a class, how serv a (mostly) socket connection.
	* <br>
	* This means, the listener bind a port(or equivalent) and listen for
	* incomming connections. If a client connection detect, he create a network
	* copnnection and inform via event the listener room about it. The connection
	* self will be saved solong its not close or the listener alive.<br>
	* With destroing of the listener, will close/interrupt all connection, who
	* create the listener.<br>
	* This class is abstract and include the listener base functions.<br>
	* <table>
	* <tr><th>Listening Event</th><th>Description</th></tr>
	* <tr><td><code>NetEvent::CLOSE</code></td>
	* <td>Listen on the own room to close and destroy the listener.</td></tr>
	* </table>
	* <table>
	* <tr><th>Sending Event</th><th>Description</th></tr>
	* <tr><td><code>NetEvent::NEW_CONNECTION</code></td>
	* <td>Send on the room after the listener create a new incoming connection.
	* </td></tr></table>
	* </p>
	*/
	class NetworkListener : public RoomOwner
	{
		protected:
			/**
			* List of active network connections.
			*/
			Vector<NetworkConnection*> _connections;

			/**
			* Listening socket.
			*/
			Socket *_socket;

		public:
			/**
			* Constructor.
			* <p>Create the listener object and observ for the
			* <code>NetEvent::CLOSE</code> event.
			* </p>
			*/
			NetworkListener();

			/**
			* Destructor.
			* <p>The destructor close all active network connection while destroying.
			* <br>As last action before the object is complete destroyed send this
			* function a <code>CLOSED</code> event with a pointer of hisself in
			* the <code>closee</code> attribute.
			* </p>
			*/
			~NetworkListener();

			/**
			* Destroyer.
			*/
			virtual void destroy() = 0;

			/**
			 * The classname of this object.
			 */
			String className();

			/**
			* Start listening.
			* <p>This function create the socket and start the listening.<br>
			* This functionality was excluded from the constructor to give a
			* change to setup the listener before he will activate.
			* </p>
			*/
			virtual bool listen();

			/*
			* Socket adress.
			* @return The address information from the socket.
			*/
			virtual String address();

			/**
			* Socket connected port.
			* <p><b>Note:</b> The port is not always used.</p>
			* @return The number of the port.
			*/
			virtual int64 port();

		protected:
			/**
			* Event API: CLOSE.
			* <p>On incoming event <code>CLOSE</code> on the own event room,
			* calls this function.
			* </p>
			* @param event Copy of incoming event object.
			*/
			virtual void onClose(Object* arg);

			/**
			* Connection listener.
			* <p>This function listen for new incoming connection. This function
			* need to start in a new thread, because the connection listening use
			* the block mechanism. If you call this function on the main thread
			* then you earn a possible deadlock.</p>
			* @param arg Arguments will not be used.
			*/
			virtual void doListening(Object* arg);

			/**
			* Create socket.
			* <p>This abstract function is planed to create and return the
			* socket for listening.<br>
			* <b>Note:</b> The socket self has not to be in the listener mode.</p>
			* return Socket, setup with all parameter.
			*/
			virtual Socket* createSocket() = 0;

			/**
			* Create a network connection object.
			* <p>This function is abstract. The subclass implementation has to
			* create and return the network connection object from the accepted
			* incomming connection.
			* </p>
			* @param connection Socket of incoming and accepted connection.
			* @return The special network connection object.
			*/
			virtual NetworkConnection* createIncomingConnection(
					Socket* connection
			) = 0;

			/**
			* Event API: Contection closed/destroyed.
			* <p>The <code>CLOSED</code> event inform the listener about a
			* destroyed connection. This function remove the pointer from the
			* connection list.
			* </p>
			*/
			virtual void onConnectionDestroy(Object* arg);
	};
}

#endif /* NETWORKLISTENER_ */
