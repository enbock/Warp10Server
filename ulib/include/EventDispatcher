/*
* EventDispacher
*
*  Created on: 09.04.2011
*      Author: Endre Bock
*/

#ifndef SIGNALDISPATCHER_
#define SIGNALDISPATCHER_

#include <Thread>
#include <Event>

namespace u
{
	/**
	* Event dispatcher.
	* <p>This class is the core of the signal handling. Events are running messages
	* which create a thread to call the added functions.<br>
	* A signal object contains also data. Which kind of data define the signal call
	* self. The dispatcher manager the register und calling of signal.<br>
	* In the classical way collect the project all signal calling for the next
	* frame and start it then. In this system call the functions of the signals
	* imitially in the actual thread. Is the dispatcEvent() function finished, so
	* exists already the threads with the call of the add signal function. Never
	* initialize objects for listening signal functions after you dispatch a signal.
	* <br/><br/>
	* A function which is the callback for a signal has to be in follow syntax:
	* <pre>void &lt;NAME_OF_FUNCION>(Object *arg);</pre>
	* To add or remove a function you need to use the Callback class:
	* <pre>addEventListener(Event::PROGRESS,
	* 	Callback(this, cb_cast(&amp;&lt;U_CLASS>::&lt;NAME_OF_FUNCTION>)
	* ));</pre>
	* The callback function has to destroy the event object copy, otherwise you
	* get memory leaks.
	* <pre>void &lt;U_CLASS>::&lt;NAME_OF_FUNCION>(Object *arg)
	* {
	* 	Event *signal = (Event*)arg;
	* 	signal->destroy();
	* }</pre>
	* </p>
	* <b>Note:</b> This class is thread safe.
	* @see Callback
	*/
	class EventDispatcher : public Object
	{
		protected: // attributes
			/**
			* Callback's for a signal.
			*/
			struct _signalVector
			{
				public:
					/**
					* Event type.
					*/
					const String* type;
					/**
					* Listening functions.
					*/
					Vector<Callback> list;
					/**
					* Constructor.
					*/
					_signalVector();
					/**
					* Copy const constructor.
					* <p>The const copy is used by the Vector.</p>
					*/
					_signalVector(const _signalVector& value);
			};

			/**
			* Add listening functions.
			*/
			Vector<_signalVector> _signalList;

		public: // attributes and functions
			/**
			* Constructor.
			*/
			EventDispatcher();

			/**
			* Copy constructor.
			* <p>While a copy also the add function. If you add function to a object
			* and copy this object into another, so you have to remove the function
			* on each object(mean 2 times).</p>
			*/
			EventDispatcher(EventDispatcher& value);

			/**
			* Copy operator.
			* <p>Copies one EventDispacher data into another. By this copies
			* also the added event listener. The listener has then to be
			* removed from both objects, before you destroy the callback object.
			* </p>
			*/
			EventDispatcher& operator=(EventDispatcher& value);

			/**
			 * Destructor.
			 */
			~EventDispatcher();

			/**
			* Add a listing function for a signal.
			* <p>A double adding of a function is not possible. A second call with
			* identical parameters will be ignored.<br>
			* The callback will be copyied internally. So is it not necessary to save
			* the callback object anywhere outside. The argument of teh callback will
			* later filled with the signal object. So don't put anything in the
			* <code>arg</code> attribute of the callback object.
			* </p>
			* @param type Name of the signal.
			* @param callback Object and function which will called on dispatch the
			*                 signal.
			*/
			void addEventListener(const String& type, Callback callback);

			/**
			* Remove a listing function for a signal.
			* <p>If the added listening not found, ignore this the function.
			* </p>
			* @param type Name of the signal.
			* @param callback Object and function which are added.
			*/
			void removeEventListener(const String& type, Callback callback);

			/**
			* Check, if a signal have listening functions on this object.
			* @return <code>true</code> for listening function otherwise <code>false</code>.
			*/
			bool hasEventListener(const String& type);

			/**
			 * Check if any bindings exists.
			 * @return <code>true</true> if an binding exists.
			 */
			bool hasEventListener();

			/**
			* Call a listening function for the signal.
			* @param signal Pointer to the signal object.
			*/
			Event* dispatchEvent(Event *signal);

			/**
			* Name of this class.
			* @return String with the class name.
			*/
			String className();

			/**
			* Info string.
			* @return String with info.
			*/
			String toString();

			/**
			* Destroy this object.
			*/
			void destroy();

		protected: //functions
			/**
			* Search the callback vector for a signal.
			* @param type Pointer of the signal name.
			* @return Vector or null if not found.
			*/
			Vector<Callback>* getEventVector(const String* type);

			/**
			* Create a new signal vector and add him to the signal list.
			* @param type Pointer of the signal name.
			* @return Added vector.
			*/
			Vector<Callback>* addEventVector(const String* type);

			/**
			* Remove a signal vector from the list.
			* @param type Pointer of the signal name.
			*/
			void delEventVector(const String* type);

	};
}

#endif /* SIGNALDISPATCHER_ */
