#ifndef NETWORK_MANAGER_
#define NETWORK_MANAGER_

#include <EventRoom>
#include <Network/Event>
#include <Network/IBuilder>
#include <Datablock>

namespace u 
{
	namespace Network
	{
		/**
		* The network manager.
		* <p>Responsible to:
		* <ul>
		* <li> Provide register for INetworkBuilder
		* <li> Create/destroy listeners
		* </ul>
		* Listening events on the mannager:
		* <ul>
		* <li> <code>u::Network::Event::REGISTER_NETWORK</code>
		* <li> <code>u::Network::Event::REQUEST_LISTENER</code>
		* </ul>
		* Sending events on the manager:
		* <ul>
		* <li> <code>u::Network::Event::NETWORK_REGISTERED</code>
		* <li> <code>u::Network::Event::LISTENER_CREATED</code>
		* </ul>
		*/
		class Manager : public EventRoom
		{
			/**
			 * Builder list.
			 */
			Datablock _builder;

			public:
				/**
				 * Default constructor.
				 */
				Manager();

				/**
				 * Destructor.
				 */
				~Manager();

				/**
				 * Destroyer.
				 */
				void destroy();

				/**
				 * Get the class name.
				 */
				String className();

			protected:
				/**
				 * Register a new network.
				 * @param arg REGISTER_NETWORK event object.
				 */
				void onRegisterNetwork(Object *arg);

				/**
				 * Requesting a listener.
				 * @param arg REQUEST_LISTENER event object.
				 */
				void onRequestListener(Object *arg);
		};
	}
}

#endif // ! NETWORK_MANAGER_