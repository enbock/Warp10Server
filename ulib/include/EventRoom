/*
* EventRoom
*
*  Created on: 13.06.2011
*      Author: Endre Bock
*/

#ifndef SIGNALROOM_
#define SIGNALROOM_

#include <EventDispatcher>

namespace u
{
	/**
	* A event room.
	* <p>
	* The event room is a communication connection point. Object can observe
	* event on the room or can dispatch events into the room. Inside a event
	* room is it possible to use multiple types of event protocols. The event
	* protocol is the definitions how to react on events. So can be implement
	* a data transfer without that the sender and receiver has references
	* from each others. Also is it imaginatable that a protocol is implement
	* via more than 2 objects with dynamic object switching, like it is defined
	* in the protocol.<br/>
	* If a sender will known, if a receiver object exists, so he can call the
	* <code>hasEventListener()</code> function with the protocol start event.
	* If a sender has to check or not, is depend of the implementation situation.
	* </p>
	* @see EventDispatcher::hasEventListener()
	*/
	class EventRoom : public EventDispatcher
	{
		public:
			/**
			* Create a event room object.
			* @see EventDispatcher::EventDispatcher()
			*/
			EventRoom();

			/**
			* Destroy the event room object.
			*/
			~EventRoom();

			/**
			* Destroy a dynamic event room object.
			*/
			void destroy();

			/**
			* Class name.
			* @return The class name as String.
			*/
			String className();

			/**
			 * Dump object
			 */
			String toString();
	};
}

#endif /* SIGNALROOM_ */
